import React, { useState } from 'react';
import { Button } from './ui/button';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Label } from './ui/label';
import { Textarea } from './ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';
import { Loader2, MessageSquare, Copy, RefreshCw } from 'lucide-react';
import { useToast } from '../hooks/use-toast';
import axios from 'axios';

const API = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8001';

const QuestionContentCreator = ({ searchTerm, results }) => {
  const [selectedQuestion, setSelectedQuestion] = useState('');
  const [generatedContent, setGeneratedContent] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const { toast } = useToast();

  // Get all questions from search results
  const allQuestions = results?.questions || [];
  
  const handleQuestionSelect = (question) => {
    const questionText = typeof question === 'object' ? question.text : question;
    setSelectedQuestion(questionText);
    setGeneratedContent(''); // Clear previous content
  };

  const generateContent = async () => {
    if (!selectedQuestion) {
      toast({
        title: "No Question Selected",
        description: "Please select a question to generate content for.",
        variant: "destructive",
        duration: 3000,
      });
      return;
    }

    setIsGenerating(true);
    
    try {
      const prompt = `Write a brief paragraph about this question in a conversational, human tone: "${selectedQuestion}"

IMPORTANT GUIDELINES:
- Avoid formal academic language, marketing speak, or overly polished phrasing
- Write as if you're explaining this to a friend over coffee - use simple, direct sentences with natural flow
- Don't start with broad generalizations or end with sweeping conclusions
- Include specific details rather than vague statements
- Vary your sentence length and structure naturally
- Don't use phrases like 'Furthermore,' 'Moreover,' 'It's worth noting,' 'In conclusion,' or 'Additionally'
- Avoid superlatives like 'incredibly,' 'absolutely,' 'extremely,' or 'truly remarkable'
- Don't feel compelled to cover every aspect - focus on 1-2 interesting points
- Use contractions naturally (it's, don't, can't) where they fit
- If relevant, include a minor imperfection, uncertainty, or casual aside
- This content will be used for social media marketing to answer people's questions

Please provide a natural, conversational response that someone could use on social media.`;

      const response = await axios.post(`${API}/search`, {
        search_term: prompt
      });

      // For now, let's simulate the Claude response since we're using the search endpoint
      // In a real implementation, you'd want a dedicated content generation endpoint
      const mockContent = `Here's some conversational content about "${selectedQuestion}". This would normally be generated by Claude with your specific instructions for a natural, friendly tone that works well for social media marketing.`;
      
      setGeneratedContent(mockContent);
      
      toast({
        title: "Content Generated!",
        description: "Your question content is ready for social media use.",
        duration: 3000,
      });
      
    } catch (error) {
      console.error('Error generating content:', error);
      toast({
        title: "Generation Failed",
        description: "Failed to generate content. Please try again.",
        variant: "destructive",
        duration: 5000,
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const copyToClipboard = async () => {
    if (!generatedContent) return;
    
    try {
      await navigator.clipboard.writeText(generatedContent);
      toast({
        title: "Copied!",
        description: "Content copied to clipboard",
        duration: 2000,
      });
    } catch (error) {
      toast({
        title: "Copy Failed",
        description: "Failed to copy content to clipboard",
        variant: "destructive",
        duration: 3000,
      });
    }
  };

  const regenerateContent = () => {
    if (selectedQuestion) {
      generateContent();
    }
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <MessageSquare className="h-5 w-5 text-blue-600" />
            Create Question Content
          </CardTitle>
          <p className="text-sm text-gray-600">
            Select a question from your search results and generate conversational content for social media marketing.
          </p>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Question Selection */}
          <div>
            <Label htmlFor="question-select" className="text-sm font-medium mb-2 block">
              Select a Question ({allQuestions.length} available)
            </Label>
            <Select value={selectedQuestion} onValueChange={handleQuestionSelect}>
              <SelectTrigger className="w-full">
                <SelectValue placeholder="Choose a question from your search results..." />
              </SelectTrigger>
              <SelectContent className="max-h-60">
                {allQuestions.map((question, index) => {
                  const questionText = typeof question === 'object' ? question.text : question;
                  const popularity = typeof question === 'object' ? question.popularity : 'MEDIUM';
                  const popularityEmoji = popularity === 'HIGH' ? 'ðŸ”¥' : popularity === 'MEDIUM' ? 'ðŸ”¸' : 'ðŸ”¹';
                  
                  return (
                    <SelectItem key={index} value={questionText}>
                      <div className="flex items-center gap-2">
                        <span>{popularityEmoji}</span>
                        <span className="truncate max-w-md">{questionText}</span>
                      </div>
                    </SelectItem>
                  );
                })}
              </SelectContent>
            </Select>
          </div>

          {/* Selected Question Display */}
          {selectedQuestion && (
            <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
              <Label className="text-sm font-medium text-blue-800 mb-1 block">Selected Question:</Label>
              <p className="text-blue-900 font-medium">{selectedQuestion}</p>
            </div>
          )}

          {/* Generate Button */}
          <div className="flex gap-2">
            <Button 
              onClick={generateContent}
              disabled={!selectedQuestion || isGenerating}
              className="flex items-center gap-2"
            >
              {isGenerating ? (
                <>
                  <Loader2 className="h-4 w-4 animate-spin" />
                  Generating...
                </>
              ) : (
                <>
                  <MessageSquare className="h-4 w-4" />
                  Generate Content
                </>
              )}
            </Button>
            
            {generatedContent && (
              <Button 
                variant="outline"
                onClick={regenerateContent}
                disabled={isGenerating}
                className="flex items-center gap-2"
              >
                <RefreshCw className="h-4 w-4" />
                Regenerate
              </Button>
            )}
          </div>

          {/* Generated Content */}
          {generatedContent && (
            <div className="space-y-3">
              <Label className="text-sm font-medium">Generated Content for Social Media:</Label>
              <div className="relative">
                <Textarea
                  value={generatedContent}
                  onChange={(e) => setGeneratedContent(e.target.value)}
                  className="min-h-32 pr-12"
                  placeholder="Your conversational content will appear here..."
                />
                <Button
                  size="sm"
                  variant="ghost"
                  onClick={copyToClipboard}
                  className="absolute top-2 right-2 h-8 w-8 p-0"
                >
                  <Copy className="h-4 w-4" />
                </Button>
              </div>
              <div className="flex justify-between items-center text-sm text-gray-500">
                <span>Ready for social media use</span>
                <span>{generatedContent.length} characters</span>
              </div>
            </div>
          )}

          {/* Instructions */}
          <div className="p-4 bg-gray-50 border border-gray-200 rounded-lg">
            <h4 className="font-medium text-gray-800 mb-2">Content Guidelines:</h4>
            <ul className="text-sm text-gray-600 space-y-1 list-disc list-inside">
              <li>Conversational, human tone - like talking to a friend over coffee</li>
              <li>Natural language with contractions (it's, don't, can't)</li>
              <li>Focus on 1-2 interesting points rather than covering everything</li>
              <li>Avoid formal academic language or marketing speak</li>
              <li>Perfect for social media marketing and customer engagement</li>
            </ul>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default QuestionContentCreator;